import streamlit as st
import pandas as pd
import altair as alt
import datetime
import pickle
import streamlit_authenticator as stauth
from pathlib import Path

from pages.data.table_7 import *

st.sidebar.markdown("""
    <style>
    [data-testid='stSidebarNav'] > ul {
        min-height: 50vh;
    } 
    </style>
    """, unsafe_allow_html=True)


# st.set_page_config(page_title="Plotting Demo", page_icon="üìà")

names = ['admin']
usernames = ['admin']

file_path = Path(__file__).parent / "../hashed_pw.pkl"
with file_path.open("rb") as file:
    hashed_passwords = pickle.load(file)

authenticator = stauth.Authenticate(names, usernames, hashed_passwords,
    "sales_dashboard", "abcdef", cookie_expiry_days=30)

name, authentication_status, username = authenticator.login("Login", "main")

if authentication_status == False:
    st.error("Username/password is incorrect")

if authentication_status == None:
    st.warning("Please enter your username and password")

if authentication_status:
    st.markdown("# –ï—Ç–∞–ø–∏ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —Ü–∏—Ä–∫–æ–Ω—ñ—î–≤–∏—Ö –∫–æ—Ä–æ–Ω–æ–∫ —Ü–∏—Ñ—Ä–æ–≤–∏–º —Ç–∞ –∞–Ω–∞–ª–æ–≥–æ–≤–∏–º –º–µ—Ç–æ–¥–æ–º")

    doctor_name = st.text_input("–ü–Ü–ë –¥–æ–∫—Ç–æ—Ä–∞", placeholder="–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –¥–æ–∫—Ç–æ—Ä–∞", key=1)

    d1 = st.date_input("–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è", datetime.date(2023, 10, 12))
    st.write('–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è:', d1)

    constr_type = st.selectbox("–¢–∏–ø –∫–æ—Å—Ç—Ä—É–∫—Ü—ñ—ó", ['–¶–∏—Ñ—Ä–æ–≤–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª', '–ê–Ω–∞–ª–æ–≥–æ–≤–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª'])

    quantity = st.number_input("–¶–∏—Ä–∫–æ–Ω—ñ—î–≤a –∫–æ—Ä–æ–Ω–∫–∞", min_value=1, placeholder="–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å", value=1)
    
    st.write("–ö–ª—ñ–Ω—ñ–∫–æ-–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ –µ—Ç–∞–ø–∏")

    if constr_type == "–¶–∏—Ñ—Ä–æ–≤–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª":
        
        selected_values = []
        selected_labels = []
        for label, value in checkbox_values_digital.items():
            if label == "–ó–Ω—è—Ç—Ç—è –≤—ñ–¥–±–∏—Ç–∫—É –∑ —Å–∏–ª—ñ–∫–æ–Ω–æ–≤–æ—ó¬†–º–∞—Å–∏":
                st.write("–ê–±–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä—É:")
            is_selected = st.checkbox(label)
            if is_selected:
                selected_values.append(value)
                selected_labels.append(label)

        doctor = 0
        doctor_yop = 0
        tech = 0
        tech_yop = 0
        ms = 0
        ms_yop = 0

        for element in selected_values:
            doctor += element[0][0]
            doctor_yop += element[0][1]
            tech += element[1][0]
            tech_yop += element[1][1]
            ms += element[2][0]
            ms_yop += element[2][1]

        doctor *= quantity
        doctor_yop *= quantity
        tech *= quantity
        tech_yop *= quantity
        ms *= quantity
        ms_yop *= quantity

        doctor_yop = round(doctor_yop, 2)
        tech_yop = round(tech_yop, 2)
        ms_yop = round(ms_yop, 2)

        st.write(f'–ó–∞–≥–∞–ª–æ–º: –ª—ñ–∫–∞—Ä {doctor}—Ö–≤ {doctor_yop} –£–û–ü. –¢–µ—Ö–Ω—ñ–∫: {tech}—Ö–≤ {tech_yop} –£–û–ü. M/C: {ms}—Ö–≤ {ms_yop} –£–û–ü')
    else:
        
        selected_values = []
        selected_labels = []
        for label, value in checkbox_values_analog.items():
            
            is_selected = st.checkbox(label)
            if is_selected:
                selected_values.append(value)
                selected_labels.append(label)

        doctor = 0
        doctor_yop = 0
        tech = 0
        tech_yop = 0
        ms = 0
        ms_yop = 0

        for element in selected_values:
            doctor += element[0][0]
            doctor_yop += element[0][1]
            tech += element[1][0]
            tech_yop += element[1][1]
            ms += element[2][0]
            ms_yop += element[1][1]

        doctor *= quantity
        doctor_yop *= quantity
        tech *= quantity
        tech_yop *= quantity
        ms *= quantity
        ms_yop *= quantity

        doctor_yop = round(doctor_yop, 2)
        tech_yop = round(tech_yop, 2)
        ms_yop = round(ms_yop, 2)

        st.write(f'–ó–∞–≥–∞–ª–æ–º: –ª—ñ–∫–∞—Ä {doctor}—Ö–≤ {doctor_yop} –£–û–ü. –¢–µ—Ö–Ω—ñ–∫: {tech}—Ö–≤ {tech_yop} –£–û–ü. M/C: {ms}—Ö–≤ {ms_yop} –£–û–ü')
    if st.button('–ó–±–µ—Ä–µ–≥—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é', key=12):
      df = pd.read_csv("6.csv")
      if doctor_name == "":
          st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª—ñ–∫–∞—Ä—è!")
      
      elif len(selected_labels) == 0:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–ª—ñ–Ω—ñ—á–Ω—ñ –µ—Ç–∞–ø–∏")
      else:
        data = [doctor_name,
                d1,
                constr_type,
                quantity,
                selected_labels,
                doctor,
                doctor_yop,
                tech,
                tech_yop,
                ms,
                ms_yop
                ]
        df.loc[len(df)] = data
        df.to_csv('6.csv', index=False)
        # st.write(df)
        st.success("–î–∞–Ω—ñ –±—É–ª–∏ –∑–±–µ—Ä–µ–∂–Ω—ñ.")


    st.sidebar.title(f"Welcome {name}")
    authenticator.logout("Logout", "sidebar")
